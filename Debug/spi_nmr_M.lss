
spi_nmr_M.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000120  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000630  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000a10  00000000  00000000  000007a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 8e 00 	jmp	0x11c	; 0x11c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
//#include"UART.h"

#include "stdlib.h"
#include "stdio.h"

int main(void) {
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	 

	SPI_MasterInit();
  74:	0e 94 40 00 	call	0x80	; 0x80 <SPI_MasterInit>

while(1)
{

	SPI_MasterTransmit('a');
  78:	81 e6       	ldi	r24, 0x61	; 97
  7a:	0e 94 5a 00 	call	0xb4	; 0xb4 <SPI_MasterTransmit>
  7e:	fc cf       	rjmp	.-8      	; 0x78 <main+0xc>

00000080 <SPI_MasterInit>:
1 1 0 fosc/32
1 1 1 fosc/64
*/

void SPI_MasterInit(void)
{
  80:	df 93       	push	r29
  82:	cf 93       	push	r28
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_SS); // MOSI, SCK, SS su output, svi ostali input, SS kao izlaz treba za GLCD
  88:	e7 e3       	ldi	r30, 0x37	; 55
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	80 eb       	ldi	r24, 0xB0	; 176
  8e:	80 83       	st	Z, r24
	SPCR = (1<<SPE)|(1<<MSTR);			// enable SPI, SPI master
  90:	ed e2       	ldi	r30, 0x2D	; 45
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 e5       	ldi	r24, 0x50	; 80
  96:	80 83       	st	Z, r24
	SPSR = (1<<SPI2X);				// clock rate fsck/2
  98:	ee e2       	ldi	r30, 0x2E	; 46
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	80 83       	st	Z, r24
	PORTB |=(1<<DD_SS);  //active high as a default
  a0:	a8 e3       	ldi	r26, 0x38	; 56
  a2:	b0 e0       	ldi	r27, 0x00	; 0
  a4:	e8 e3       	ldi	r30, 0x38	; 56
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	80 61       	ori	r24, 0x10	; 16
  ac:	8c 93       	st	X, r24
}
  ae:	cf 91       	pop	r28
  b0:	df 91       	pop	r29
  b2:	08 95       	ret

000000b4 <SPI_MasterTransmit>:

uint8_t SPI_MasterTransmit(uint8_t cData)
{
  b4:	df 93       	push	r29
  b6:	cf 93       	push	r28
  b8:	0f 92       	push	r0
  ba:	cd b7       	in	r28, 0x3d	; 61
  bc:	de b7       	in	r29, 0x3e	; 62
  be:	89 83       	std	Y+1, r24	; 0x01
	/* Start transmission */
	SPDR = cData;
  c0:	ef e2       	ldi	r30, 0x2F	; 47
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	89 81       	ldd	r24, Y+1	; 0x01
  c6:	80 83       	st	Z, r24
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)))
  c8:	ee e2       	ldi	r30, 0x2E	; 46
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	88 23       	and	r24, r24
  d0:	dc f7       	brge	.-10     	; 0xc8 <SPI_MasterTransmit+0x14>
		;
	return SPDR;	// Za GLCD
  d2:	ef e2       	ldi	r30, 0x2F	; 47
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
}
  d8:	0f 90       	pop	r0
  da:	cf 91       	pop	r28
  dc:	df 91       	pop	r29
  de:	08 95       	ret

000000e0 <SPI_SlaveInit>:

void SPI_SlaveInit(void)
{
  e0:	df 93       	push	r29
  e2:	cf 93       	push	r28
  e4:	cd b7       	in	r28, 0x3d	; 61
  e6:	de b7       	in	r29, 0x3e	; 62
	/* Set MISO output, all others input */
	DDR_SPI = (1<<DD_MISO);
  e8:	e7 e3       	ldi	r30, 0x37	; 55
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 e4       	ldi	r24, 0x40	; 64
  ee:	80 83       	st	Z, r24
	/* Enable SPI */
	SPCR = (1<<SPE);
  f0:	ed e2       	ldi	r30, 0x2D	; 45
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 e4       	ldi	r24, 0x40	; 64
  f6:	80 83       	st	Z, r24
}
  f8:	cf 91       	pop	r28
  fa:	df 91       	pop	r29
  fc:	08 95       	ret

000000fe <SPI_SlaveReceive>:

char SPI_SlaveReceive(void)
{
  fe:	df 93       	push	r29
 100:	cf 93       	push	r28
 102:	cd b7       	in	r28, 0x3d	; 61
 104:	de b7       	in	r29, 0x3e	; 62
	/* Wait for reception complete */
	while(!(SPSR & (1<<SPIF)))
 106:	ee e2       	ldi	r30, 0x2E	; 46
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	88 23       	and	r24, r24
 10e:	dc f7       	brge	.-10     	; 0x106 <SPI_SlaveReceive+0x8>
	;
	/* Return data register */
	return SPDR;
 110:	ef e2       	ldi	r30, 0x2F	; 47
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
}
 116:	cf 91       	pop	r28
 118:	df 91       	pop	r29
 11a:	08 95       	ret

0000011c <_exit>:
 11c:	f8 94       	cli

0000011e <__stop_program>:
 11e:	ff cf       	rjmp	.-2      	; 0x11e <__stop_program>
